# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  api:
    container_name: api
    image: node:latest
    user: node
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    env_file:
      - ./api/.env
    ports:
      - "3301:${API_PORT}"
    depends_on:
      db:
         condition: service_healthy

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
  db:
    container_name: db
    image: postgres
    build:
      context: docker/db
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 256mb
    #user: postgres
    volumes:
     - ipefa-pwd-studerd-2024-data:/var/lib/postgresql/data
    environment:
     - POSTGRES_DB=${BACKEND_DB_NAME}
     - POSTGRES_USER=${BACKEND_DB_ADMIN}
     - POSTGRES_PASSWORD=${BACKEND_DB_PASSWORD}
    env_file:
      - ./api/.env
    ports:
     - "${BACKEND_DB_PORT}:5432"
    healthcheck:
     test: [ "CMD", "pg_isready" ]
     interval: 10s
     timeout: 5s
     retries: 5
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - "8080:8080"
volumes:
  ipefa-pwd-studerd-2024-data:


